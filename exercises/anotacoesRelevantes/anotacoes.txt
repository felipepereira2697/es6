Javascript parte II


Sobre o padrao Proxy
1) Ele é útil quando queremos deixar os nossos modelos mais limpos, sem várias armadilhas penduradas nos seus métodos. 
Por exemplo, evitando pendurar um código de infraestrutura em nossos modelos.

2) Ele serve como um placeholder de um objeto real, servindo como uma interface para o objeto que queremos interagir, 
nos permitindo controlar o acesso às suas propriedades e métodos.

let pessoa = {
    nome: 'Flávio'    
}

let pessoaProxy = new Proxy(pessoa, {
    get(target, prop, receiver) {
         O target é o objeto real, que é encapsulado pelo proxy.

        O prop é a propriedade que está sendo lida.

        O receiver é uma referência ao próprio proxy.
    }
});

o segundo parametro da instancia de Proxy é um handler q é um objeto JS para que possamos executar algo nele
nesse parametro podemos interceptar metodos e com base nisso podemos reescrever o metodo


=======
Sobre o padrao Factory
Sobre o padrão de projeto Factory, julgue as afirmativas abaixo:

1) Ele é utilizado quando precisamos facilitar a criação de um objeto.

2) É ideal quando queremos criar objetos similares, com apenas seus detalhes diferentes, que podemos passar nos argumentos da Factory.

3) É bom para abstrair a criação de um objeto complexo, já que o programador que utilizar a Factory não precisa necessariamente saber como é feita esta operação.



=====================================================================================

 Estados possiveias de uma requisicao ajax
 
    * 0 -> Requisicao nao iniciada
    * 1 -> Conexao com o servidor estabelecida
    * 2 -> Requisicao recebida
    * 3 -> processando requisicao
    * 4 -> Requisicao concluida e resposta esta protna
    

JSON É UMA ANOTACAO TEXTUAL ENQUANTO O OBJETO JS VOCE PODE MANIPULAR, POR ISSO PRECISAMOS DO JSON.parse();